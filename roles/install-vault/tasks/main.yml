---
# tasks file for install-vault

# Add the key to the hashicorp repo and ensure its present
  - name: Add Hashicorp repo key
    apt_key: 
      url: https://apt.releases.hashicorp.com/gpg
      state: present

# Add the vault repository to the package manager
  - name: Add Hashicorp Vault Repo
    shell: sudo apt-add-repository "{{ vault_repo }}"

# Install vault using the package manager
  - name: Install Vault
    apt:
      name: vault
      state: present
      update_cache: yes

# Stop the Vault service so we can load the configuration
  - name: Stop Vault Service
    service:
      name: vault
      state: stopped

# Output the KSM key ID generated by terraform that was passed into this roles /vars/main.yml
  - debug: msg="{{ tf_vault_kms_key }}"

# Copy the vault.j2 vault configuration template to the desired destnation with owner:group vault:vault . File name must be vault.hcl
  - name: Copy vault config to server
    template:
      src: "{{ vault_config_location_src }}"
      dest: "{{ vault_config_location_dest }}"
      owner: vault
      group: vault

# Start the vault service to load the configuration.
  - name: Start Vault Service
    service:
      name: vault
      state: started
      enabled: yes

# Add a permanent environment variable for the VAULT_ADDR  in /etc/environment
  - name: Insert VAULT_ADDR in to /etc/environment
    lineinfile:
      path: /etc/environment
      line: VAULT_ADDR="http://127.0.0.1:8200"

# Add a permanent environment variable for the VAULT_ADDR in /etc/profile
  - name: Insert VAULT_ADDR in to /etc/profile
    lineinfile:
      path: /etc/profile
      line: export VAULT_ADDR="http://127.0.0.1:8200"

# Initialize Vault with the output in a json format and register the output to the variable vault_init
  - name: Vault Init
    shell: vault operator init -key-shares=1 -key-threshold=1 -format json
    register: vault_init

# Debug and output the stdout of the vault_init variable to the terminal.
  - debug:
      var: vault_init.stdout_lines

# Restart the vault service so its running. 
  - name: Restart Vault Service
    service:
      name: vault
      state: restarted

# Parse the output of the vault_init variable that was sent to stdout in json format and create an ansible fact from it
  - name: Parse output of vault init
    set_fact:
      vault_init_parsed: "{{ vault_init.stdout | from_json }}"

# Search the parsed vault_init variable for the recovery_keys_hex string and index each item. Iterate over each item to create a file 
# in the dest: named after the recovery key, that contains the recovery key. 
# become = no because no root access is needed to create these files.
# delegate_to means the recovery key files will be placed on the ansible control node from which this role runs.
  - name: Write recovery keys to files
    copy:
      dest: "{{ recovery_keys_dir_output }}/recovery_keys_{{ item.0 }}"
      content: "{{ item.1 }}"
    with_indexed_items: "{{ vault_init_parsed.recovery_keys_hex }}"
    become: no
    delegate_to: localhost

# Search the parsed vault_init variable for the root_token string. Create a file 
# in the dest: named after the root_token key, that contains the root_token.
# become = no because no root access is needed to create this file.
# delegate_to means the root_token file will be placed on the ansible control node from which this role runs.
  - name: Write root token to file
    copy:
      content: "{{ vault_init_parsed.root_token }}"
      dest: "{{root_token_dir_output}}/rootkey"
    become: no
    delegate_to: localhost
